#+AUTHOR: Wasym A. Alonso

# Cover
#+begin_html
<p align="center">
<img src="../assets/cover.png" alt="Carbon Cover">
</p>
#+end_html

# Badges
#+begin_html
<p align="center">
<img src="https://img.shields.io/github/license/sparky-game/carbon?color=coral" alt="License">
<img src="https://img.shields.io/badge/C-11-violet" alt="C Standard">
<img src="https://img.shields.io/badge/C++-20-violet" alt="C++ Standard">
<img src="https://img.shields.io/github/v/tag/sparky-game/carbon?color=slateblue" alt="Latest Git Tag">
<img src="https://www.bestpractices.dev/projects/9605/badge" alt="OpenSSF Best Practices">
<img src="https://cla-assistant.io/readme/badge/sparky-game/carbon" alt="SCLA signatures count">
<img src="https://img.shields.io/github/commit-activity/w/sparky-game/carbon?color=brown" alt="Weekly commit frequency">
</p>
#+end_html

~Carbon~ (/[[https://en.wikipedia.org/wiki/Help:IPA/English][\slash{}Ààk…ëÀêb·µän\slash{}]]/) is the ultimate *tiny* and *easy to use* C/C++ standard library to enjoy programming. @@html:<br>@@
It serves a wide variety of use cases, from CLI programs, graphics-intensive real-time applications, to complex full-fledged testing suites. @@html:<br>@@
If you'd like to make a contribution, you can check the project's [[CONTRIBUTING.org][guidelines]]; also, keep an eye on both security issues reporting [[SECURITY.md][instructions]] and our [[CODE_OF_CONDUCT.md][Code of Conduct]]. Furthermore, if you do something cool with /Carbon/, don't forget to add the [[https://github.com/topics/sk-cbn][#sk-cbn]] tag to your /topics/! *¬Ø\_(„ÉÑ)_/¬Ø*

-----

We use *CI/CD* to ensure the final product has the expected level of quality, if not more üöÄ. This is the summary of the pipelines being run:

| *Kind*                        | *Target*          | *Status*                                                                                                                                                                |
| CI (/Continuous Integration/) | /master/          | @@html:<img src="https://github.com/sparky-game/carbon/actions/workflows/ci.yaml/badge.svg" href="https://github.com/sparky-game/carbon/actions/workflows/ci.yaml">@@   |
| CD (/Continuous Delivery/)    | /master/          | @@html:<img src="https://github.com/sparky-game/carbon/actions/workflows/cd.yaml/badge.svg" href="https://github.com/sparky-game/carbon/actions/workflows/cd.yaml">@@   |
| CD (/Continuous Deployment/)  | /master/docs/www/ | @@html:<img src="https://github.com/sparky-game/carbon/actions/workflows/www.yaml/badge.svg" href="https://github.com/sparky-game/carbon/actions/workflows/www.yaml">@@ |

-----

Do you want to *keep up with changes* or do you have a *question* that doesn't require you to open an issue? @@html:<br>@@
Join the [[https://github.com/sparky-game/carbon/discussions][GitHub Discussions]] forum, meet other users like you. The more we are, the better for everyone. @@html:<br>@@
There you can ask questions, exchange ideas, share some of your work, make polls, stay up to date with new updates and announcements of the library, and much more.

Do you want to support ~Carbon~? Consider becoming a [[https://github.com/sponsors/iWas-Coder][sponsor]], or making a donation via [[https://ko-fi.com/iwas_coder][Ko-fi]] or [[https://buymeacoffee.com/iwas.coder][Buy Me a Coffee]].
Many thanks to *all of you* who are reading this; I hope it'll be useful and it'll make you *enjoy programming* a little bit more.

#+begin_quote
[!WARNING]
~Carbon~ is currently in an *alpha* quality stage, and is not production-ready yet.
#+end_quote

* Table of Contents :toc:
- [[#usage][Usage]]
  - [[#get-the-code][Get the code]]
  - [[#build-from-source][Build from source]]
  - [[#examples][Examples]]
- [[#licensing][Licensing]]
- [[#references][References]]

* Usage

/Carbon/ is in essence a two-part library: the *static/dynamic lib pkg* itself (where all symbols and instructions are defined), and the *C/C++ header file* (which gets generated by the build process as an amalgamation of all internal headers the library uses).

** Get the code

We can get /Carbon/ in our preferred way of managing dependencies or external libraries in our projects. It's important to do so via the *OFFICIAL* Git repository hosted on [[https://github.com/sparky-game/carbon][GitHub]], and not through any other website or server. Appart from that, any ref can be checked out, being ~master~ (the trunk of all dev progress), a tagged commit (e.g. ~v1.0~), an actively maintained version branch (e.g. ~v1.0.y/stable~) or a LTS version branch (e.g. ~v1.0.y/lts~) the preferred ones.

Here are the main options of obtaining it:

*Git Clone:*

#+begin_src sh
git clone --recursive https://github.com/sparky-game/carbon
#+end_src

*Git Submodule:*

#+begin_src sh
git submodule add https://github.com/sparky-game/carbon [...]
git submodule update --init --recursive
#+end_src

*CMake FetchContent:*

#+begin_html
<p><img src="https://cdn.frankerfacez.com/emote/381875/1">&nbsp;&nbsp;<i>&mdash;&nbsp;&nbsp;–ú–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è.</i></p>
#+end_html

#+begin_src cmake
include(FetchContent)
FetchContent_Declare(
  carbon
  GIT_REPOSITORY "https://github.com/sparky-game/carbon"
  GIT_TAG        [...]
  GIT_PROGRESS   TRUE
)
FetchContent_MakeAvailable(carbon)
#+end_src

*Pre-compiled Package:*

You might want to take a look to the [[https://github.com/sparky-game/carbon/releases/latest][latest release available]] and download the appropriate pre-compiled package for your CPU's architecture and OS.

** Build from source

If wanted to build /Carbon/ from source yourself, it can be done without any problems. We use a custom ~make~ utility (which uses /Carbon/ under the hood) as our build system to manage testing, compiling and packaging the library, both static and dynamic.

This custom build system can rebuild itself properly (using our preferred compilation flags), which means that you'll only need to bootstrap it once:

#+begin_src sh
cc src_build/make.c -o make
#+end_src

Once built, we can take a look at the available subcommands and options by issuing the command ~./make help~. To run the full build pipeline it's just as easy as:

#+begin_src sh
./make
#+end_src

#+begin_quote
[!TIP]
Checkout the [[../INSTALL][installation instructions]] to make /Carbon/ available on your system as any other library (the ~PREFIX~ is customizable according to your needs).
#+end_quote

** Examples

A good place to start learning and discovering all the things you can do with /Carbon/ is *reading* and *executing* the [[../examples][examples]]. One can issue the command ~./make examples~ to build them all: for each example source file (~.c~ or ~.cc~) it produces a ~.bin~ executable file, which can be run normally without problems.

Furthermore, you can also take a look at the amalgamated distributable *header file* (~carbon.h~), where each module of the library is declared and documented. This is all the documentation you'll ever need, and it's also a good place to find new things /Carbon/ can do.

Lastly, for a more advanced understanding of all available and tested functionality that /Carbon/ provides, *reading* the [[../src_test][tests]] is a great next step. There it can be learnt both how to work with the different modules, and how to use /Carbon/ itself to test your own applications and programs. One can issue the command ~./make test~ to build and run all tests.

* Licensing

Copyright (C) Wasym A. Alonso. All Rights Reserved.

#+begin_quote
/Carbon/ is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License Version 3 (GNU AGPL-3.0) as published by the Free Software Foundation (FSF) on November 19th 2007. @@html:<br>@@
/Carbon/ is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License Version 3 for more details. @@html:<br>@@
For more information, see <https://www.gnu.org/licenses/agpl-3.0>.
#+end_quote

As mentioned above, /Carbon/ is licensed under the GNU's *AGPL-3.0-only*, which means that any software created or that uses it is also subject to the same license. This implies that if you develop an application using /Carbon/, it must also be released as free software under the GNU's *AGPL-3.0-only*. This ensures that the freedoms to use, study, modify and share the software are preserved for everyone.

If you prefer to release your application under a different, more commercially friendly license, there is an option available. You can purchase a copy of the *Carbon Runtime Library Exception (CRLE)*, which is in essence a /distinct commercial license/, for you to use this library without releasing your software under GNU's *AGPL-3.0-only*. Some key aspects of the *CRLE* are the following:
- *One-Time Purchase (OTP):* Once obtaining a copy of the CRLE, it lasts forever without expiration date.
- *Project-specific:* Each CRLE is tied to a single project of yours.
- *Version compatibility:* Each CRLE applies to a specific branch or minor version of /Carbon/ (e.g. ~v1.0.y/lts~), enabling you to update the library to a more up-to-date version with the same CRLE.
- *Professional support:* You also gain access to more advanced support regarding the library, as well as a private channel to make high-priority requests such as bug fixes or security vulnerabilities.

For more details and to acquire a copy of the *CRLE*, please visit <https://libcarbon.org>.

* References

1. Alshahwan, N., Chheda, J., Finegenova, A., Gokkaya, B., Harman, M., Harper, I., Marginean, A., Sengupta, S., Wang, E. (2024, February 14). /Automated Unit Test Improvement using Large Language Models at Meta/ [Paper]. arXiv, Cornell University. <https://doi.org/10.48550/arXiv.2402.09171>
2. Barrett, S. (2015, June 7). /Advice for Writing Small Programs in C/ [Video]. YouTube. <https://www.youtube.com/watch?v=eAhWIO1Ra6M>
3. Catto, E. (2024, August 27). /Determinism/ [Article]. Box2D. <https://box2d.org/posts/2024/08/determinism/>
4. Christensen, T. (2002, January 1). /The Cambridge History of Western Music Theory/ [Book]. Cambridge University Press. <https://doi.org/10.1017/CHOL9780521623711>
5. De Vries, J. (2020, June 17). /Learn modern OpenGL graphics programming in a step-by-step fashion/ [Book]. LearnOpenGL. <https://learnopengl.com>
6. Gallego Dur√°n, F. J. (2021, December 7). /C++ Slotmap: qu√© es y por qu√© usarlo en tu motor de videojuegos/ [Video]. YouTube. <https://www.youtube.com/watch?v=GKfRDAUvFoE>
7. Gallego Dur√°n, F. J. (2021, December 10). /C++ Programamos un Slotmap para nuestro motor de videojuegos ECS/ [Video]. YouTube. <https://www.youtube.com/watch?v=ZfWF9tqQOh0>
8. Gallego Dur√°n, F. J. (2022, January 28). /C++ Template Metaprogramming: Introducci√≥n/ [Video]. YouTube. <https://www.youtube.com/watch?v=4NKbmCfZ9OI>
9. Gallego Dur√°n, F. J. (2022, March 2). /C++ Operadores: c√≥mo programar un vector 3D/ [Video]. YouTube. <https://www.youtube.com/watch?v=cBMbhJPuw1w>
10. Holden, D. (2021, April 16). /orangeduck/Cello: Higher level programming in C/ [Code]. GitHub. <https://github.com/orangeduck/Cello>
11. Immisch, L., Wilstrup C. (2017, January 1). /PCM Terminology and Concepts/ [Article]. pyalsaaudio's Website. <https://larsimmisch.github.io/pyalsaaudio/terminology.html>
12. Kutepov, A. (2023, June 30). /tsoding/nn.h: Simple stb-style header-only library for Neural Networks/ [Code]. GitHub. <https://github.com/tsoding/nn.h>
13. Kutepov, A. (2024, November 5). /tsoding/nob.h: Next generation of the NoBuild idea/ [Code]. GitHub. <https://github.com/tsoding/nob.h>
14. Kutepov, A. (2025, February 3). /tsoding/coroutines: Custom coroutines implementation in GNU C/ [Code]. GitHub. <https://github.com/tsoding/coroutines>
15. Matsumoto, M., Nishimura, T. (1998, January 1). /Mersenne twister: a 623-dimensionally equidistributed uniform pseudo-random number generator/ [Paper]. Transactions on Modeling and Computer Simulation (TOMACS), Association for Computing Machinery (ACM). <https://doi.org/10.1145/272991.272995>
16. Matsumoto, M., Nishimura, T. (2004, September 29). /A C-program for MT19937-64 (2004/9/29 version)/ [Code]. Department of Mathematics, Hiroshima University. <http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/VERSIONS/C-LANG/mt19937-64.c>
17. Nishimura, T. (2000, October 1). /Tables of 64-bit Mersenne twisters/ [Paper]. Transactions on Modeling and Computer Simulation (TOMACS), Association for Computing Machinery (ACM). <https://doi.org/10.1145/369534.369540>
18. OptumSoft. (2016, January 5). /Dangers of using dlsym() with RTLD_NEXT/ [Article]. OptumSoft. <https://optumsoft.com/dangers-of-using-dlsym-with-rtld_next/>
19. Rice, B. (2018, January 23). /You Can't Unit Test C, Right?/ [Video]. YouTube. <https://www.youtube.com/watch?v=z-uWt5wVVkU>
20. Santell, J. (2019, April 14). /Model View Projection/ [Article]. jsantell.com. <https://jsantell.com/model-view-projection/>
21. Ten Bosch, M. (2020, January 30). /Let's remove Quaternions from every 3D Engine/ [Article]. marctenbosch.com. <https://marctenbosch.com/quaternions/>
22. Viotti, J. C. (2023, December 1). /Understanding Objective-C by transpiling it to C++/ [Article]. jviotti.com. <https://www.jviotti.com/2023/12/01/understanding-objective-c-by-transpiling-it-to-cpp.html>
