#+AUTHOR: Wasym A. Alonso

# Logo & Title
#+begin_html
<h1 align="center">
<img src="assets/logo.png" alt="Carbon Logo">
<br/>
Carbon
</h1>
#+end_html

# Subtitle
#+begin_html
<h4 align="center">
You can't unit test C, right?
</h4>
#+end_html

# Repository marketing badges
#+begin_html
<p align="center">
<a href="https://www.buymeacoffee.com/iwas.coder">
<img src="https://cdn.buymeacoffee.com/buttons/default-yellow.png" alt="Buy Me A Coffee" height=41>
</a>
</p>
#+end_html

# Repository info badges
#+begin_html
<p align="center">
<img src="https://img.shields.io/github/license/sparky-game/carbon?color=blue" alt="License">
<img src="https://img.shields.io/badge/C-99-blue" alt="C Standard">
<img src="https://img.shields.io/github/repo-size/sparky-game/carbon?color=blue" alt="Size">
<img src="https://img.shields.io/github/v/tag/sparky-game/carbon?color=blue" alt="Release">
<img src="https://img.shields.io/badge/speed-%F0%9F%94%A5blazing-blue" alt="Blazing Speed">
<br/>
<img src="https://www.bestpractices.dev/projects/9605/badge" alt="OpenSSF Best Practices">
<img src="https://api.scorecard.dev/projects/github.com/sparky-game/carbon/badge" alt="OpenSSF Scorecard">
</p>
#+end_html

# Repository CI badges
#+begin_html
<p align="center">
<img src="https://github.com/sparky-game/carbon/actions/workflows/test.yaml/badge.svg" alt="CI Test">
<img src="https://github.com/sparky-game/carbon/actions/workflows/security.yaml/badge.svg" alt="Security Analysis">
</p>
#+end_html

/Carbon/ helps you write better C/C++ tests. ðŸ™‚

/Carbon/ is a testing framework that focuses on being lightweight and straightforward, giving the best possible development experience. Whether you work on GNU/Linux, BSDs, Windows or macOS, if you write C/C++ code, /Carbon/ can help you.

#+begin_quote
Carbon is free software: you can redistribute it and/or modify it under the terms of the BSD 3-Clause "New" or "Revised" License as published by The Regents of the University of California. @@html:<br>@@
Carbon is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the BSD 3-Clause "New" or "Revised" License for more details. @@html:<br>@@
You should have received a copy of the BSD 3-Clause "New" or "Revised" License along with Carbon. If not, see <https://opensource.org/license/BSD-3-Clause>.
#+end_quote

* Table of Contents :toc:
- [[#usage][Usage]]
  - [[#target-code][Target code]]
  - [[#test-case][Test case]]
  - [[#entrypoint][Entrypoint]]
  - [[#execution][Execution]]
- [[#code-coverage][Code coverage]]

* Usage

We can use /Carbon/ in our preferred way of managing dependencies or external libraries in our projects. Here are the main options of obtaining the library:

*Git Submodules*:
#+begin_src sh
git submodule add https://github.com/sparky-game/carbon vendor/carbon
#+end_src

*CMake FetchContent*:
#+begin_src cmake
include(FetchContent)
FetchContent_Declare(
  carbon
  GIT_REPOSITORY "https://github.com/sparky-game/carbon"
  GIT_TAG        e2a1fd0c447730ad971c75106b26d7c1ed083664
  GIT_PROGRESS   TRUE
)
FetchContent_MakeAvailable(carbon)
#+end_src

*Pre-compiled Package*:
#+begin_src sh
wget https://github.com/sparky-game/carbon/releases/download/v0.7-alpha/carbon-0.7-linux-amd64.tgz
tar -xvf carbon-0.7-linux-amd64.tgz
#+end_src

If wanted to build /Carbon/ from source independently (i.e. without defining ~CARBON_IMPLEMENTATION~ in your code), it can be done without any problems. We use a custom ~make~ utility (which uses /Carbon/ under the hood) as our build system to manage cleaning, compiling and packaging the library.

#+begin_src sh
cc -std=gnu99 src/make.c -o make
./make [clean|mrproper]
#+end_src

** Target code

#+begin_src c
// x.h

#pragma once

void inc_int(int *x) {
  ++(*x);
}
#+end_src

** Test case

#+begin_src c
// x_test.c

#include <carbon.h>
#include "x.h"

CARBON_TEST(x, inc_int) {
  int a = 1, b = 0;
  carbon_should_not_be(a, b);
  inc_int(&b);
  carbon_should_be(a, b);
  return CARBON_OK;
}
#+end_src

** Entrypoint

#+begin_src c
// carbon.c

#define CARBON_IMPLEMENTATION
#include <carbon.h>

int main(void) {
  return CARBON_RUN_ALL();
}
#+end_src

If we define the macro ~CARBON_IMPLEMENTATION~, it makes the library operate in a *header-only* structure: all the internal source code of /Carbon/ is included in that translation unit, i.e. no need to compile and link it separately. Alternatively, one can link with the library's internal source code either compiling it ourselves, or using a pre-compiled package of the [[https://github.com/sparky-game/carbon/releases/latest][latest release available]].

#+begin_src sh
cc -I vendor/carbon -std=gnu99 *.c -o carbon
#+end_src

** Execution

#+begin_example
$ ./carbon -h
usage: ./carbon [OPTION]
Options:
  -n, --no-output  disable JUnit XML test results output
  -o, --output     output JUnit XML test results to specific file (default: `carbon_results.xml`)
  -h, --help       display this help and exit
  -v, --version    output version information and exit

Report bugs to: <https://github.com/sparky-game/carbon/issues>
SPARKY Carbon homepage: <https://github.com/sparky-game/carbon>
#+end_example

Additionally, it will create a file named ~carbon_results.xml~ with the execution results formatted as JUnit XML.

* Code coverage

/Code/ or /test coverage/ is a metric which measures the amount of source code getting executed when a test suite is run. It's important to mention that this measurement doesn't relate by any means to the quality of the codebase, it just reflects how complete and thorough a specific test suite is, nothing more.

Nevertheless, it's a nice metric to have, and it's important that /Carbon/ supports it. As we're working with C/C++, the most used tool for the job is ~gcov~. When using the ~--coverage~ flag, it passes to the compiler/linker specific flags to produce certain code instrumentation.

- The ~*.gcno~ notes files are generated when the source files are compiled with the ~-ftest-coverage~ option (contained inside the ~--coverage~ flag). It contains information to reconstruct the basic block graphs and assign soure line numbers to blocks.
- The ~*.gcda~ count data files are generated when a program linked with ~-lgcov~ option (contained inside the ~--coverage~ flag) containing object files built with the ~-fprofile-arcs~ option (contained inside the ~--coverage~ flag) is executed. It contains arc transition counts, value profile counts and some summary information.

They shouldn't be accessed manually, but with ~gcov~ itself, using one of its formatting options, e.g. ~--json-format~.
